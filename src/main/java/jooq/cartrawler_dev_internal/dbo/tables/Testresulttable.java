/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables;


import java.math.BigDecimal;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;
import jooq.cartrawler_dev_internal.dbo.tables.records.TestresulttableRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Testresulttable extends TableImpl<TestresulttableRecord> {

    private static final long serialVersionUID = -141267042;

    /**
     * The reference instance of <code>Cartrawler_dev_internal.dbo.TestResultTable</code>
     */
    public static final Testresulttable TESTRESULTTABLE = new Testresulttable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestresulttableRecord> getRecordType() {
        return TestresulttableRecord.class;
    }

    /**
     * The column <code>Cartrawler_dev_internal.dbo.TestResultTable.fk_scrape</code>.
     */
    public final TableField<TestresulttableRecord, Integer> FK_SCRAPE = createField("fk_scrape", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.TestResultTable.provider</code>.
     */
    public final TableField<TestresulttableRecord, String> PROVIDER = createField("provider", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.TestResultTable.SIPP</code>.
     */
    public final TableField<TestresulttableRecord, String> SIPP = createField("SIPP", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.TestResultTable.price</code>.
     */
    public final TableField<TestresulttableRecord, BigDecimal> PRICE = createField("price", org.jooq.impl.SQLDataType.NUMERIC(14, 2), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.TestResultTable.currency</code>.
     */
    public final TableField<TestresulttableRecord, String> CURRENCY = createField("currency", org.jooq.impl.SQLDataType.VARCHAR(16), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.TestResultTable.aircon</code>.
     */
    public final TableField<TestresulttableRecord, Boolean> AIRCON = createField("aircon", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.TestResultTable.doors</code>.
     */
    public final TableField<TestresulttableRecord, Integer> DOORS = createField("doors", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.TestResultTable.auto</code>.
     */
    public final TableField<TestresulttableRecord, Boolean> AUTO = createField("auto", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * Create a <code>Cartrawler_dev_internal.dbo.TestResultTable</code> table reference
     */
    public Testresulttable() {
        this(DSL.name("TestResultTable"), null);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.TestResultTable</code> table reference
     */
    public Testresulttable(String alias) {
        this(DSL.name(alias), TESTRESULTTABLE);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.TestResultTable</code> table reference
     */
    public Testresulttable(Name alias) {
        this(alias, TESTRESULTTABLE);
    }

    private Testresulttable(Name alias, Table<TestresulttableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Testresulttable(Name alias, Table<TestresulttableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Testresulttable(Table<O> child, ForeignKey<O, TestresulttableRecord> key) {
        super(child, key, TESTRESULTTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Testresulttable as(String alias) {
        return new Testresulttable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Testresulttable as(Name alias) {
        return new Testresulttable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Testresulttable rename(String name) {
        return new Testresulttable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Testresulttable rename(Name name) {
        return new Testresulttable(name, null);
    }
}
