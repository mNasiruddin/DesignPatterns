/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;
import jooq.cartrawler_dev_internal.dbo.Indexes;
import jooq.cartrawler_dev_internal.dbo.Keys;
import jooq.cartrawler_dev_internal.dbo.tables.records.AssociatesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Associates extends TableImpl<AssociatesRecord> {

    private static final long serialVersionUID = 768458321;

    /**
     * The reference instance of <code>Cartrawler_dev_internal.dbo.Associates</code>
     */
    public static final Associates ASSOCIATES = new Associates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssociatesRecord> getRecordType() {
        return AssociatesRecord.class;
    }

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Associates.Associate_Id</code>.
     */
    public final TableField<AssociatesRecord, Integer> ASSOCIATE_ID = createField("Associate_Id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Associates.Associate_Name</code>.
     */
    public final TableField<AssociatesRecord, String> ASSOCIATE_NAME = createField("Associate_Name", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Associates.Password</code>.
     */
    public final TableField<AssociatesRecord, String> PASSWORD = createField("Password", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Associates.Agent_id</code>.
     */
    public final TableField<AssociatesRecord, Integer> AGENT_ID = createField("Agent_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>Cartrawler_dev_internal.dbo.Associates</code> table reference
     */
    public Associates() {
        this(DSL.name("Associates"), null);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.Associates</code> table reference
     */
    public Associates(String alias) {
        this(DSL.name(alias), ASSOCIATES);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.Associates</code> table reference
     */
    public Associates(Name alias) {
        this(alias, ASSOCIATES);
    }

    private Associates(Name alias, Table<AssociatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Associates(Name alias, Table<AssociatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Associates(Table<O> child, ForeignKey<O, AssociatesRecord> key) {
        super(child, key, ASSOCIATES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSOCIATES_PK_ASSOCIATES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AssociatesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ASSOCIATES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssociatesRecord> getPrimaryKey() {
        return Keys.PK_ASSOCIATES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssociatesRecord>> getKeys() {
        return Arrays.<UniqueKey<AssociatesRecord>>asList(Keys.PK_ASSOCIATES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Associates as(String alias) {
        return new Associates(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Associates as(Name alias) {
        return new Associates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Associates rename(String name) {
        return new Associates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Associates rename(Name name) {
        return new Associates(name, null);
    }
}
