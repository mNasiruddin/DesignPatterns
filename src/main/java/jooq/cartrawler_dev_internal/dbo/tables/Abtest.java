/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;
import jooq.cartrawler_dev_internal.dbo.Indexes;
import jooq.cartrawler_dev_internal.dbo.Keys;
import jooq.cartrawler_dev_internal.dbo.tables.records.AbtestRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Abtest extends TableImpl<AbtestRecord> {

    private static final long serialVersionUID = 253669677;

    /**
     * The reference instance of <code>Cartrawler_dev_internal.dbo.abtest</code>
     */
    public static final Abtest ABTEST = new Abtest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbtestRecord> getRecordType() {
        return AbtestRecord.class;
    }

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtest.id</code>.
     */
    public final TableField<AbtestRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtest.fk_abtests</code>.
     */
    public final TableField<AbtestRecord, Integer> FK_ABTESTS = createField("fk_abtests", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtest.client_id</code>.
     */
    public final TableField<AbtestRecord, Integer> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtest.testtoken</code>.
     */
    public final TableField<AbtestRecord, Integer> TESTTOKEN = createField("testtoken", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtest.query_id</code>.
     */
    public final TableField<AbtestRecord, Boolean> QUERY_ID = createField("query_id", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * Create a <code>Cartrawler_dev_internal.dbo.abtest</code> table reference
     */
    public Abtest() {
        this(DSL.name("abtest"), null);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.abtest</code> table reference
     */
    public Abtest(String alias) {
        this(DSL.name(alias), ABTEST);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.abtest</code> table reference
     */
    public Abtest(Name alias) {
        this(alias, ABTEST);
    }

    private Abtest(Name alias, Table<AbtestRecord> aliased) {
        this(alias, aliased, null);
    }

    private Abtest(Name alias, Table<AbtestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Abtest(Table<O> child, ForeignKey<O, AbtestRecord> key) {
        super(child, key, ABTEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ABTEST_PK_ABTEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AbtestRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ABTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AbtestRecord> getPrimaryKey() {
        return Keys.PK_ABTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AbtestRecord>> getKeys() {
        return Arrays.<UniqueKey<AbtestRecord>>asList(Keys.PK_ABTEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Abtest as(String alias) {
        return new Abtest(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Abtest as(Name alias) {
        return new Abtest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Abtest rename(String name) {
        return new Abtest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Abtest rename(Name name) {
        return new Abtest(name, null);
    }
}
