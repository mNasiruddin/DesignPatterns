/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;
import jooq.cartrawler_dev_internal.dbo.Indexes;
import jooq.cartrawler_dev_internal.dbo.Keys;
import jooq.cartrawler_dev_internal.dbo.tables.records.AbtestsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Abtests extends TableImpl<AbtestsRecord> {

    private static final long serialVersionUID = 1684148090;

    /**
     * The reference instance of <code>Cartrawler_dev_internal.dbo.abtests</code>
     */
    public static final Abtests ABTESTS = new Abtests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbtestsRecord> getRecordType() {
        return AbtestsRecord.class;
    }

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtests.id</code>.
     */
    public final TableField<AbtestsRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtests.title</code>.
     */
    public final TableField<AbtestsRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtests.description</code>.
     */
    public final TableField<AbtestsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtests.start_date</code>.
     */
    public final TableField<AbtestsRecord, Timestamp> START_DATE = createField("start_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtests.end_date</code>.
     */
    public final TableField<AbtestsRecord, Timestamp> END_DATE = createField("end_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.abtests.status</code>.
     */
    public final TableField<AbtestsRecord, Boolean> STATUS = createField("status", org.jooq.impl.SQLDataType.BIT.nullable(false), this, "");

    /**
     * Create a <code>Cartrawler_dev_internal.dbo.abtests</code> table reference
     */
    public Abtests() {
        this(DSL.name("abtests"), null);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.abtests</code> table reference
     */
    public Abtests(String alias) {
        this(DSL.name(alias), ABTESTS);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.abtests</code> table reference
     */
    public Abtests(Name alias) {
        this(alias, ABTESTS);
    }

    private Abtests(Name alias, Table<AbtestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Abtests(Name alias, Table<AbtestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Abtests(Table<O> child, ForeignKey<O, AbtestsRecord> key) {
        super(child, key, ABTESTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ABTESTS_PK_ABTESTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AbtestsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ABTESTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AbtestsRecord> getPrimaryKey() {
        return Keys.PK_ABTESTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AbtestsRecord>> getKeys() {
        return Arrays.<UniqueKey<AbtestsRecord>>asList(Keys.PK_ABTESTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Abtests as(String alias) {
        return new Abtests(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Abtests as(Name alias) {
        return new Abtests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Abtests rename(String name) {
        return new Abtests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Abtests rename(Name name) {
        return new Abtests(name, null);
    }
}
