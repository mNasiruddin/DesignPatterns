/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;
import jooq.cartrawler_dev_internal.dbo.Indexes;
import jooq.cartrawler_dev_internal.dbo.Keys;
import jooq.cartrawler_dev_internal.dbo.tables.records.GeozoneRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Geozone extends TableImpl<GeozoneRecord> {

    private static final long serialVersionUID = -1826761939;

    /**
     * The reference instance of <code>Cartrawler_dev_internal.dbo.geoZone</code>
     */
    public static final Geozone GEOZONE = new Geozone();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeozoneRecord> getRecordType() {
        return GeozoneRecord.class;
    }

    /**
     * The column <code>Cartrawler_dev_internal.dbo.geoZone.id</code>.
     */
    public final TableField<GeozoneRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.geoZone.latitude</code>.
     */
    public final TableField<GeozoneRecord, BigDecimal> LATITUDE = createField("latitude", org.jooq.impl.SQLDataType.NUMERIC(18, 8).nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.geoZone.longitude</code>.
     */
    public final TableField<GeozoneRecord, BigDecimal> LONGITUDE = createField("longitude", org.jooq.impl.SQLDataType.NUMERIC(18, 8).nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.geoZone.radius</code>.
     */
    public final TableField<GeozoneRecord, BigDecimal> RADIUS = createField("radius", org.jooq.impl.SQLDataType.NUMERIC(18, 8).nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.geoZone.zoneType</code>.
     */
    public final TableField<GeozoneRecord, Short> ZONETYPE = createField("zoneType", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.geoZone.zone_data</code>.
     */
    public final TableField<GeozoneRecord, String> ZONE_DATA = createField("zone_data", org.jooq.impl.SQLDataType.NVARCHAR, this, "");

    /**
     * Create a <code>Cartrawler_dev_internal.dbo.geoZone</code> table reference
     */
    public Geozone() {
        this(DSL.name("geoZone"), null);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.geoZone</code> table reference
     */
    public Geozone(String alias) {
        this(DSL.name(alias), GEOZONE);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.geoZone</code> table reference
     */
    public Geozone(Name alias) {
        this(alias, GEOZONE);
    }

    private Geozone(Name alias, Table<GeozoneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Geozone(Name alias, Table<GeozoneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Geozone(Table<O> child, ForeignKey<O, GeozoneRecord> key) {
        super(child, key, GEOZONE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GEOZONE_PK__GEOZONE__3213E83F29EB8A75);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GeozoneRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GEOZONE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GeozoneRecord> getPrimaryKey() {
        return Keys.PK__GEOZONE__3213E83F29EB8A75;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GeozoneRecord>> getKeys() {
        return Arrays.<UniqueKey<GeozoneRecord>>asList(Keys.PK__GEOZONE__3213E83F29EB8A75);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Geozone as(String alias) {
        return new Geozone(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Geozone as(Name alias) {
        return new Geozone(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Geozone rename(String name) {
        return new Geozone(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Geozone rename(Name name) {
        return new Geozone(name, null);
    }
}
