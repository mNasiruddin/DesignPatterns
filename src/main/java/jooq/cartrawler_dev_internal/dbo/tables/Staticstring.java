/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;
import jooq.cartrawler_dev_internal.dbo.Indexes;
import jooq.cartrawler_dev_internal.dbo.Keys;
import jooq.cartrawler_dev_internal.dbo.tables.records.StaticstringRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Staticstring extends TableImpl<StaticstringRecord> {

    private static final long serialVersionUID = 1045224561;

    /**
     * The reference instance of <code>Cartrawler_dev_internal.dbo.StaticString</code>
     */
    public static final Staticstring STATICSTRING = new Staticstring();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StaticstringRecord> getRecordType() {
        return StaticstringRecord.class;
    }

    /**
     * The column <code>Cartrawler_dev_internal.dbo.StaticString.id</code>.
     */
    public final TableField<StaticstringRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.StaticString.hash</code>.
     */
    public final TableField<StaticstringRecord, String> HASH = createField("hash", org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.StaticString.text</code>.
     */
    public final TableField<StaticstringRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.VARCHAR(8000).nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.StaticString.type</code>.
     */
    public final TableField<StaticstringRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.StaticString.lang</code>.
     */
    public final TableField<StaticstringRecord, String> LANG = createField("lang", org.jooq.impl.SQLDataType.VARCHAR(5).nullable(false), this, "");

    /**
     * Create a <code>Cartrawler_dev_internal.dbo.StaticString</code> table reference
     */
    public Staticstring() {
        this(DSL.name("StaticString"), null);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.StaticString</code> table reference
     */
    public Staticstring(String alias) {
        this(DSL.name(alias), STATICSTRING);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.StaticString</code> table reference
     */
    public Staticstring(Name alias) {
        this(alias, STATICSTRING);
    }

    private Staticstring(Name alias, Table<StaticstringRecord> aliased) {
        this(alias, aliased, null);
    }

    private Staticstring(Name alias, Table<StaticstringRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Staticstring(Table<O> child, ForeignKey<O, StaticstringRecord> key) {
        super(child, key, STATICSTRING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STATICSTRING_IX_STATICSTRING_1, Indexes.STATICSTRING_PK_STATICSTRING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StaticstringRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STATICSTRING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StaticstringRecord>> getKeys() {
        return Arrays.<UniqueKey<StaticstringRecord>>asList(Keys.PK_STATICSTRING, Keys.IX_STATICSTRING_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Staticstring as(String alias) {
        return new Staticstring(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Staticstring as(Name alias) {
        return new Staticstring(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Staticstring rename(String name) {
        return new Staticstring(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Staticstring rename(Name name) {
        return new Staticstring(name, null);
    }
}
