/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.tables.Torrouterips;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TorrouteripsRecord extends UpdatableRecordImpl<TorrouteripsRecord> implements Record4<Integer, Timestamp, Timestamp, Integer> {

    private static final long serialVersionUID = 1230110835;

    /**
     * Setter for <code>Cartrawler_dev_internal.dbo.TorRouterIPs.ip</code>.
     */
    public void setIp(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>Cartrawler_dev_internal.dbo.TorRouterIPs.ip</code>.
     */
    public Integer getIp() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Cartrawler_dev_internal.dbo.TorRouterIPs.first_seen</code>.
     */
    public void setFirstSeen(Timestamp value) {
        set(1, value);
    }

    /**
     * Getter for <code>Cartrawler_dev_internal.dbo.TorRouterIPs.first_seen</code>.
     */
    public Timestamp getFirstSeen() {
        return (Timestamp) get(1);
    }

    /**
     * Setter for <code>Cartrawler_dev_internal.dbo.TorRouterIPs.last_seen</code>.
     */
    public void setLastSeen(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>Cartrawler_dev_internal.dbo.TorRouterIPs.last_seen</code>.
     */
    public Timestamp getLastSeen() {
        return (Timestamp) get(2);
    }

    /**
     * Setter for <code>Cartrawler_dev_internal.dbo.TorRouterIPs.counter</code>.
     */
    public void setCounter(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>Cartrawler_dev_internal.dbo.TorRouterIPs.counter</code>.
     */
    public Integer getCounter() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Timestamp, Timestamp, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Timestamp, Timestamp, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Torrouterips.TORROUTERIPS.IP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field2() {
        return Torrouterips.TORROUTERIPS.FIRST_SEEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field3() {
        return Torrouterips.TORROUTERIPS.LAST_SEEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return Torrouterips.TORROUTERIPS.COUNTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getIp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component2() {
        return getFirstSeen();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component3() {
        return getLastSeen();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getCounter();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getIp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value2() {
        return getFirstSeen();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value3() {
        return getLastSeen();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getCounter();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TorrouteripsRecord value1(Integer value) {
        setIp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TorrouteripsRecord value2(Timestamp value) {
        setFirstSeen(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TorrouteripsRecord value3(Timestamp value) {
        setLastSeen(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TorrouteripsRecord value4(Integer value) {
        setCounter(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TorrouteripsRecord values(Integer value1, Timestamp value2, Timestamp value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TorrouteripsRecord
     */
    public TorrouteripsRecord() {
        super(Torrouterips.TORROUTERIPS);
    }

    /**
     * Create a detached, initialised TorrouteripsRecord
     */
    public TorrouteripsRecord(Integer ip, Timestamp firstSeen, Timestamp lastSeen, Integer counter) {
        super(Torrouterips.TORROUTERIPS);

        set(0, ip);
        set(1, firstSeen);
        set(2, lastSeen);
        set(3, counter);
    }
}
