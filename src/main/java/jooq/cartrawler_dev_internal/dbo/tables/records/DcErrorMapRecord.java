/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables.records;


import java.util.UUID;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.tables.DcErrorMap;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DcErrorMapRecord extends UpdatableRecordImpl<DcErrorMapRecord> implements Record4<UUID, Integer, Integer, String> {

    private static final long serialVersionUID = -526810590;

    /**
     * Setter for <code>Cartrawler_dev_internal.dbo.dc_error_map.guid</code>.
     */
    public void setGuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>Cartrawler_dev_internal.dbo.dc_error_map.guid</code>.
     */
    public UUID getGuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>Cartrawler_dev_internal.dbo.dc_error_map.id</code>.
     */
    public void setId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>Cartrawler_dev_internal.dbo.dc_error_map.id</code>.
     */
    public Integer getId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>Cartrawler_dev_internal.dbo.dc_error_map.fk_dc_prompt</code>.
     */
    public void setFkDcPrompt(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>Cartrawler_dev_internal.dbo.dc_error_map.fk_dc_prompt</code>.
     */
    public Integer getFkDcPrompt() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>Cartrawler_dev_internal.dbo.dc_error_map.identifying_text</code>.
     */
    public void setIdentifyingText(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>Cartrawler_dev_internal.dbo.dc_error_map.identifying_text</code>.
     */
    public String getIdentifyingText() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UUID, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<UUID, Integer, Integer, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<UUID> field1() {
        return DcErrorMap.DC_ERROR_MAP.GUID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return DcErrorMap.DC_ERROR_MAP.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return DcErrorMap.DC_ERROR_MAP.FK_DC_PROMPT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return DcErrorMap.DC_ERROR_MAP.IDENTIFYING_TEXT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID component1() {
        return getGuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getFkDcPrompt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getIdentifyingText();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UUID value1() {
        return getGuid();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getFkDcPrompt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getIdentifyingText();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DcErrorMapRecord value1(UUID value) {
        setGuid(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DcErrorMapRecord value2(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DcErrorMapRecord value3(Integer value) {
        setFkDcPrompt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DcErrorMapRecord value4(String value) {
        setIdentifyingText(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DcErrorMapRecord values(UUID value1, Integer value2, Integer value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DcErrorMapRecord
     */
    public DcErrorMapRecord() {
        super(DcErrorMap.DC_ERROR_MAP);
    }

    /**
     * Create a detached, initialised DcErrorMapRecord
     */
    public DcErrorMapRecord(UUID guid, Integer id, Integer fkDcPrompt, String identifyingText) {
        super(DcErrorMap.DC_ERROR_MAP);

        set(0, guid);
        set(1, id);
        set(2, fkDcPrompt);
        set(3, identifyingText);
    }
}
