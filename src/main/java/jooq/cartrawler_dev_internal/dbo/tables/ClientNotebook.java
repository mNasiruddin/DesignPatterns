/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;
import jooq.cartrawler_dev_internal.dbo.Indexes;
import jooq.cartrawler_dev_internal.dbo.Keys;
import jooq.cartrawler_dev_internal.dbo.tables.records.ClientNotebookRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientNotebook extends TableImpl<ClientNotebookRecord> {

    private static final long serialVersionUID = -1269147902;

    /**
     * The reference instance of <code>Cartrawler_dev_internal.dbo.Client_notebook</code>
     */
    public static final ClientNotebook CLIENT_NOTEBOOK = new ClientNotebook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientNotebookRecord> getRecordType() {
        return ClientNotebookRecord.class;
    }

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Client_notebook.seq_no</code>.
     */
    public final TableField<ClientNotebookRecord, Integer> SEQ_NO = createField("seq_no", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Client_notebook.client_id</code>.
     */
    public final TableField<ClientNotebookRecord, Integer> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Client_notebook.note_date</code>.
     */
    public final TableField<ClientNotebookRecord, Timestamp> NOTE_DATE = createField("note_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Client_notebook.note_detail</code>.
     */
    public final TableField<ClientNotebookRecord, String> NOTE_DETAIL = createField("note_detail", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Client_notebook.added_by</code>.
     */
    public final TableField<ClientNotebookRecord, String> ADDED_BY = createField("added_by", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Client_notebook.customer_add</code>.
     */
    public final TableField<ClientNotebookRecord, Boolean> CUSTOMER_ADD = createField("customer_add", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Client_notebook.complaint</code>.
     */
    public final TableField<ClientNotebookRecord, Boolean> COMPLAINT = createField("complaint", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.Client_notebook.public_text</code>.
     */
    public final TableField<ClientNotebookRecord, Boolean> PUBLIC_TEXT = createField("public_text", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * Create a <code>Cartrawler_dev_internal.dbo.Client_notebook</code> table reference
     */
    public ClientNotebook() {
        this(DSL.name("Client_notebook"), null);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.Client_notebook</code> table reference
     */
    public ClientNotebook(String alias) {
        this(DSL.name(alias), CLIENT_NOTEBOOK);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.Client_notebook</code> table reference
     */
    public ClientNotebook(Name alias) {
        this(alias, CLIENT_NOTEBOOK);
    }

    private ClientNotebook(Name alias, Table<ClientNotebookRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClientNotebook(Name alias, Table<ClientNotebookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ClientNotebook(Table<O> child, ForeignKey<O, ClientNotebookRecord> key) {
        super(child, key, CLIENT_NOTEBOOK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLIENT_NOTEBOOK_PK_CLIENT_NOTEBOOK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClientNotebookRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLIENT_NOTEBOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClientNotebookRecord> getPrimaryKey() {
        return Keys.PK_CLIENT_NOTEBOOK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClientNotebookRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientNotebookRecord>>asList(Keys.PK_CLIENT_NOTEBOOK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClientNotebook as(String alias) {
        return new ClientNotebook(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ClientNotebook as(Name alias) {
        return new ClientNotebook(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientNotebook rename(String name) {
        return new ClientNotebook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClientNotebook rename(Name name) {
        return new ClientNotebook(name, null);
    }
}
