/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;
import jooq.cartrawler_dev_internal.dbo.Indexes;
import jooq.cartrawler_dev_internal.dbo.Keys;
import jooq.cartrawler_dev_internal.dbo.tables.records.FailuresRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Failures extends TableImpl<FailuresRecord> {

    private static final long serialVersionUID = -1043281515;

    /**
     * The reference instance of <code>Cartrawler_dev_internal.dbo.failures</code>
     */
    public static final Failures FAILURES = new Failures();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FailuresRecord> getRecordType() {
        return FailuresRecord.class;
    }

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures._ref</code>.
     */
    public final TableField<FailuresRecord, Integer> _REF = createField("_ref", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures.count</code>.
     */
    public final TableField<FailuresRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures.ref</code>.
     */
    public final TableField<FailuresRecord, Integer> REF = createField("ref", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures.pickup</code>.
     */
    public final TableField<FailuresRecord, Integer> PICKUP = createField("pickup", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures.dropoff</code>.
     */
    public final TableField<FailuresRecord, Integer> DROPOFF = createField("dropoff", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures.pickup_date</code>.
     */
    public final TableField<FailuresRecord, Timestamp> PICKUP_DATE = createField("pickup_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures.dropoff_date</code>.
     */
    public final TableField<FailuresRecord, Timestamp> DROPOFF_DATE = createField("dropoff_date", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures.source</code>.
     */
    public final TableField<FailuresRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>Cartrawler_dev_internal.dbo.failures.url</code>.
     */
    public final TableField<FailuresRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * Create a <code>Cartrawler_dev_internal.dbo.failures</code> table reference
     */
    public Failures() {
        this(DSL.name("failures"), null);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.failures</code> table reference
     */
    public Failures(String alias) {
        this(DSL.name(alias), FAILURES);
    }

    /**
     * Create an aliased <code>Cartrawler_dev_internal.dbo.failures</code> table reference
     */
    public Failures(Name alias) {
        this(alias, FAILURES);
    }

    private Failures(Name alias, Table<FailuresRecord> aliased) {
        this(alias, aliased, null);
    }

    private Failures(Name alias, Table<FailuresRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Failures(Table<O> child, ForeignKey<O, FailuresRecord> key) {
        super(child, key, FAILURES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FAILURES_PK_FAILURES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FailuresRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FAILURES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FailuresRecord> getPrimaryKey() {
        return Keys.PK_FAILURES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FailuresRecord>> getKeys() {
        return Arrays.<UniqueKey<FailuresRecord>>asList(Keys.PK_FAILURES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Failures as(String alias) {
        return new Failures(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Failures as(Name alias) {
        return new Failures(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Failures rename(String name) {
        return new Failures(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Failures rename(Name name) {
        return new Failures(name, null);
    }
}
