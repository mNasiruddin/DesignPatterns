/*
 * This file is generated by jOOQ.
 */
package jooq.cartrawler_dev_internal.dbo.routines;


import java.sql.Timestamp;

import javax.annotation.Generated;

import jooq.cartrawler_dev_internal.dbo.Dbo;

import org.jooq.Parameter;
import org.jooq.impl.AbstractRoutine;
import org.jooq.types.UByte;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SpBlitz extends AbstractRoutine<Integer> {

    private static final long serialVersionUID = 758804661;

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.RETURN_VALUE</code>.
     */
    public static final Parameter<Integer> RETURN_VALUE = createParameter("RETURN_VALUE", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.Help</code>.
     */
    public static final Parameter<UByte> HELP = createParameter("Help", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.CheckUserDatabaseObjects</code>.
     */
    public static final Parameter<UByte> CHECKUSERDATABASEOBJECTS = createParameter("CheckUserDatabaseObjects", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.CheckProcedureCache</code>.
     */
    public static final Parameter<UByte> CHECKPROCEDURECACHE = createParameter("CheckProcedureCache", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.OutputType</code>.
     */
    public static final Parameter<String> OUTPUTTYPE = createParameter("OutputType", org.jooq.impl.SQLDataType.VARCHAR(20), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.OutputProcedureCache</code>.
     */
    public static final Parameter<UByte> OUTPUTPROCEDURECACHE = createParameter("OutputProcedureCache", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.CheckProcedureCacheFilter</code>.
     */
    public static final Parameter<String> CHECKPROCEDURECACHEFILTER = createParameter("CheckProcedureCacheFilter", org.jooq.impl.SQLDataType.VARCHAR(10), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.CheckServerInfo</code>.
     */
    public static final Parameter<UByte> CHECKSERVERINFO = createParameter("CheckServerInfo", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.SkipChecksServer</code>.
     */
    public static final Parameter<String> SKIPCHECKSSERVER = createParameter("SkipChecksServer", org.jooq.impl.SQLDataType.NVARCHAR(256), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.SkipChecksDatabase</code>.
     */
    public static final Parameter<String> SKIPCHECKSDATABASE = createParameter("SkipChecksDatabase", org.jooq.impl.SQLDataType.NVARCHAR(256), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.SkipChecksSchema</code>.
     */
    public static final Parameter<String> SKIPCHECKSSCHEMA = createParameter("SkipChecksSchema", org.jooq.impl.SQLDataType.NVARCHAR(256), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.SkipChecksTable</code>.
     */
    public static final Parameter<String> SKIPCHECKSTABLE = createParameter("SkipChecksTable", org.jooq.impl.SQLDataType.NVARCHAR(256), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.IgnorePrioritiesBelow</code>.
     */
    public static final Parameter<Integer> IGNOREPRIORITIESBELOW = createParameter("IgnorePrioritiesBelow", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.IgnorePrioritiesAbove</code>.
     */
    public static final Parameter<Integer> IGNOREPRIORITIESABOVE = createParameter("IgnorePrioritiesAbove", org.jooq.impl.SQLDataType.INTEGER, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.OutputServerName</code>.
     */
    public static final Parameter<String> OUTPUTSERVERNAME = createParameter("OutputServerName", org.jooq.impl.SQLDataType.NVARCHAR(256), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.OutputDatabaseName</code>.
     */
    public static final Parameter<String> OUTPUTDATABASENAME = createParameter("OutputDatabaseName", org.jooq.impl.SQLDataType.NVARCHAR(256), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.OutputSchemaName</code>.
     */
    public static final Parameter<String> OUTPUTSCHEMANAME = createParameter("OutputSchemaName", org.jooq.impl.SQLDataType.NVARCHAR(256), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.OutputTableName</code>.
     */
    public static final Parameter<String> OUTPUTTABLENAME = createParameter("OutputTableName", org.jooq.impl.SQLDataType.NVARCHAR(256), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.OutputXMLasNVARCHAR</code>.
     */
    public static final Parameter<UByte> OUTPUTXMLASNVARCHAR = createParameter("OutputXMLasNVARCHAR", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.EmailRecipients</code>.
     */
    public static final Parameter<String> EMAILRECIPIENTS = createParameter("EmailRecipients", org.jooq.impl.SQLDataType.VARCHAR, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.EmailProfile</code>.
     */
    public static final Parameter<String> EMAILPROFILE = createParameter("EmailProfile", org.jooq.impl.SQLDataType.NVARCHAR(128), false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.SummaryMode</code>.
     */
    public static final Parameter<UByte> SUMMARYMODE = createParameter("SummaryMode", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.BringThePain</code>.
     */
    public static final Parameter<UByte> BRINGTHEPAIN = createParameter("BringThePain", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.Debug</code>.
     */
    public static final Parameter<UByte> DEBUG = createParameter("Debug", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, false, false);

    /**
     * The parameter <code>Cartrawler_dev_internal.dbo.sp_Blitz.VersionDate</code>.
     */
    public static final Parameter<Timestamp> VERSIONDATE = createParameter("VersionDate", org.jooq.impl.SQLDataType.TIMESTAMP, false, false);

    /**
     * Create a new routine call instance
     */
    public SpBlitz() {
        super("sp_Blitz", Dbo.DBO, org.jooq.impl.SQLDataType.INTEGER);

        setReturnParameter(RETURN_VALUE);
        addInParameter(HELP);
        addInParameter(CHECKUSERDATABASEOBJECTS);
        addInParameter(CHECKPROCEDURECACHE);
        addInParameter(OUTPUTTYPE);
        addInParameter(OUTPUTPROCEDURECACHE);
        addInParameter(CHECKPROCEDURECACHEFILTER);
        addInParameter(CHECKSERVERINFO);
        addInParameter(SKIPCHECKSSERVER);
        addInParameter(SKIPCHECKSDATABASE);
        addInParameter(SKIPCHECKSSCHEMA);
        addInParameter(SKIPCHECKSTABLE);
        addInParameter(IGNOREPRIORITIESBELOW);
        addInParameter(IGNOREPRIORITIESABOVE);
        addInParameter(OUTPUTSERVERNAME);
        addInParameter(OUTPUTDATABASENAME);
        addInParameter(OUTPUTSCHEMANAME);
        addInParameter(OUTPUTTABLENAME);
        addInParameter(OUTPUTXMLASNVARCHAR);
        addInParameter(EMAILRECIPIENTS);
        addInParameter(EMAILPROFILE);
        addInParameter(SUMMARYMODE);
        addInParameter(BRINGTHEPAIN);
        addInParameter(DEBUG);
        addInOutParameter(VERSIONDATE);
    }

    /**
     * Set the <code>Help</code> parameter IN value to the routine
     */
    public void setHelp(UByte value) {
        setValue(HELP, value);
    }

    /**
     * Set the <code>CheckUserDatabaseObjects</code> parameter IN value to the routine
     */
    public void setCheckuserdatabaseobjects(UByte value) {
        setValue(CHECKUSERDATABASEOBJECTS, value);
    }

    /**
     * Set the <code>CheckProcedureCache</code> parameter IN value to the routine
     */
    public void setCheckprocedurecache(UByte value) {
        setValue(CHECKPROCEDURECACHE, value);
    }

    /**
     * Set the <code>OutputType</code> parameter IN value to the routine
     */
    public void setOutputtype(String value) {
        setValue(OUTPUTTYPE, value);
    }

    /**
     * Set the <code>OutputProcedureCache</code> parameter IN value to the routine
     */
    public void setOutputprocedurecache(UByte value) {
        setValue(OUTPUTPROCEDURECACHE, value);
    }

    /**
     * Set the <code>CheckProcedureCacheFilter</code> parameter IN value to the routine
     */
    public void setCheckprocedurecachefilter(String value) {
        setValue(CHECKPROCEDURECACHEFILTER, value);
    }

    /**
     * Set the <code>CheckServerInfo</code> parameter IN value to the routine
     */
    public void setCheckserverinfo(UByte value) {
        setValue(CHECKSERVERINFO, value);
    }

    /**
     * Set the <code>SkipChecksServer</code> parameter IN value to the routine
     */
    public void setSkipchecksserver(String value) {
        setValue(SKIPCHECKSSERVER, value);
    }

    /**
     * Set the <code>SkipChecksDatabase</code> parameter IN value to the routine
     */
    public void setSkipchecksdatabase(String value) {
        setValue(SKIPCHECKSDATABASE, value);
    }

    /**
     * Set the <code>SkipChecksSchema</code> parameter IN value to the routine
     */
    public void setSkipchecksschema(String value) {
        setValue(SKIPCHECKSSCHEMA, value);
    }

    /**
     * Set the <code>SkipChecksTable</code> parameter IN value to the routine
     */
    public void setSkipcheckstable(String value) {
        setValue(SKIPCHECKSTABLE, value);
    }

    /**
     * Set the <code>IgnorePrioritiesBelow</code> parameter IN value to the routine
     */
    public void setIgnoreprioritiesbelow(Integer value) {
        setValue(IGNOREPRIORITIESBELOW, value);
    }

    /**
     * Set the <code>IgnorePrioritiesAbove</code> parameter IN value to the routine
     */
    public void setIgnoreprioritiesabove(Integer value) {
        setValue(IGNOREPRIORITIESABOVE, value);
    }

    /**
     * Set the <code>OutputServerName</code> parameter IN value to the routine
     */
    public void setOutputservername(String value) {
        setValue(OUTPUTSERVERNAME, value);
    }

    /**
     * Set the <code>OutputDatabaseName</code> parameter IN value to the routine
     */
    public void setOutputdatabasename(String value) {
        setValue(OUTPUTDATABASENAME, value);
    }

    /**
     * Set the <code>OutputSchemaName</code> parameter IN value to the routine
     */
    public void setOutputschemaname(String value) {
        setValue(OUTPUTSCHEMANAME, value);
    }

    /**
     * Set the <code>OutputTableName</code> parameter IN value to the routine
     */
    public void setOutputtablename(String value) {
        setValue(OUTPUTTABLENAME, value);
    }

    /**
     * Set the <code>OutputXMLasNVARCHAR</code> parameter IN value to the routine
     */
    public void setOutputxmlasnvarchar(UByte value) {
        setValue(OUTPUTXMLASNVARCHAR, value);
    }

    /**
     * Set the <code>EmailRecipients</code> parameter IN value to the routine
     */
    public void setEmailrecipients(String value) {
        setValue(EMAILRECIPIENTS, value);
    }

    /**
     * Set the <code>EmailProfile</code> parameter IN value to the routine
     */
    public void setEmailprofile(String value) {
        setValue(EMAILPROFILE, value);
    }

    /**
     * Set the <code>SummaryMode</code> parameter IN value to the routine
     */
    public void setSummarymode(UByte value) {
        setValue(SUMMARYMODE, value);
    }

    /**
     * Set the <code>BringThePain</code> parameter IN value to the routine
     */
    public void setBringthepain(UByte value) {
        setValue(BRINGTHEPAIN, value);
    }

    /**
     * Set the <code>Debug</code> parameter IN value to the routine
     */
    public void setDebug(UByte value) {
        setValue(DEBUG, value);
    }

    /**
     * Set the <code>VersionDate</code> parameter IN value to the routine
     */
    public void setVersiondate(Timestamp value) {
        setValue(VERSIONDATE, value);
    }

    /**
     * Get the <code>VersionDate</code> parameter OUT value from the routine
     */
    public Timestamp getVersiondate() {
        return get(VERSIONDATE);
    }
}
